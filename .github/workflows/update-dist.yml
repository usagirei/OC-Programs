name: Update Dist

on:
    push:
        branches:
            - master
    workflow_dispatch:

jobs:
    get-matrix:
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.get-matrix.outputs.matrix }}
            rebuild: ${{ steps.get-matrix.outputs.rebuild }}
        steps:
            - uses: actions/checkout@v3
            - uses: ./.github/actions/lua/install
              with:
                  packages: ("luafilesystem")

            - uses: actions/cache@v3
              id: cache
              with:
                  path: |
                      misc/setup/setup.lua
                      misc/setup/.install
                  key: setup-${{ hashFiles('misc/setup/setup.lua', 'misc/setup/.install') }}

            - uses: ./.github/actions/lua/add-path
              if: steps.cache.outputs.cache-hit != 'true'
              with:
                  path: "${{ github.workspace }}/libpack/data/lib/?.lua;${{ github.workspace }}/libpack/data/lib/?/init.lua"
            - uses: ./.github/actions/lua/add-bin
              with:
                  src: "${{ github.workspace }}/misc"
                  scripts: ("get-matrix")
            - uses: ./.github/actions/lua/add-bin
              if: steps.cache.outputs.cache-hit != 'true'
              with:
                  src: "${{ github.workspace }}/libpack/data/bin"
                  scripts: ("luapack" "luamin")

            - name: Pack Setup
              if: steps.cache.outputs.cache-hit != 'true'
              run: |
                  (cd 'misc/setup'; luapack)

            - name: Bundle Files
              run: |
                  tar -cvf setup.tar -C misc/setup .install setup.lua

            - id: get-matrix
              run: |
                  checksum=($(md5sum setup.tar))
                  get-matrix $checksum >> $GITHUB_OUTPUT

            - uses: actions/upload-artifact@v3
              with:
                  name: setup-files
                  path: setup.tar
                  retention-days: 1

    create-tarballs:
        if: needs.get-matrix.outputs.rebuild == 'true'
        runs-on: ubuntu-latest
        needs: [get-matrix]
        strategy:
            matrix: ${{ fromJSON(needs.get-matrix.outputs.matrix) }}
        steps:
            - run: echo Bundling ${{ matrix.program }}

            - uses: actions/checkout@v3
              with:
                  sparse-checkout: |
                      .github
                      libpack
                      ${{ matrix.program }}

            - uses: ./.github/actions/lua/install
              if: matrix.minified == true
              with:
                  packages: ("luafilesystem")

            - uses: ./.github/actions/lua/add-bin
              if: matrix.minified == true
              with:
                  src: "${{ github.workspace }}/libpack/data/bin"
                  scripts: ("luamin")

            - uses: ./.github/actions/lua/add-path
              if: matrix.minified == true
              with:
                  path: "${{ github.workspace }}/libpack/data/lib/?.lua;${{ github.workspace }}/libpack/data/lib/?/init.lua"

            - name: Download Setup Files
              uses: actions/download-artifact@v3
              if: matrix.setup == true
              with:
                  name: setup-files

            - name: Extract Setup Files
              if: matrix.setup == true
              run: |
                  echo Extracting Setup files
                  mkdir -p .setup
                  tar -xvf setup.tar -C .setup

            - name: Create Tarball
              if: matrix.regular == true
              id: tarball
              run: |
                  mkdir -p .setup
                  tar \
                      --sort=name --owner=root:0 --group=root:0 --mtime='1970-01-01 00:00:00' \
                      --exclude=.min --exclude=.dist \
                      -cvf $TARFILE \
                      -C $INPUT_ROOT . \
                      -C $SETUP_ROOT .
                  echo "path=$TARFILE" >> $GITHUB_OUTPUT
              env:
                  TARFILE: "${{ runner.temp }}/${{ matrix.program }}.tar"
                  INPUT_ROOT: "${{ github.workspace }}/${{ matrix.program }}"
                  SETUP_ROOT: "${{ github.workspace }}/.setup"

            - name: Minify Sources
              if: matrix.minified == true
              run: |
                  echo Minifying
                  (pushd ${{ matrix.program }} && \
                      find . -type f -name "*.lua" -printf '%P\0' | \
                      xargs -0 -i sh -c 'echo -n "$1..."; luamin "$1" "$1" || exit 255' sh {} \
                  )

            - name: Create Minified Tarball
              if: matrix.minified == true
              id: tarball-min
              run: |
                  mkdir -p .setup
                  tar \
                      --sort=name --owner=root:0 --group=root:0 --mtime='1970-01-01 00:00:00' \
                      --exclude=.min --exclude=.dist \
                      -cvf $TARFILE \
                      -C $INPUT_ROOT . \
                      -C $SETUP_ROOT .
                  echo "path=$TARFILE" >> $GITHUB_OUTPUT
              env:
                  TARFILE: "${{ runner.temp }}/${{ matrix.program }}.min.tar"
                  INPUT_ROOT: "${{ github.workspace }}/${{ matrix.program }}"
                  SETUP_ROOT: "${{ github.workspace }}/.setup"

            - name: Update Checksum
              id: checksum-file
              run: |
                  echo "${{ matrix.checksum }}" >> $sumFile
                  echo "path=$sumFile" >> $GITHUB_OUTPUT
              env:
                  sumFile: "${{ runner.temp }}/.${{ matrix.program }}.sum"

            - name: Upload Tarball
              uses: actions/upload-artifact@v3
              with:
                  name: tarballs
                  path: |
                      ${{ steps.tarball.outputs.path }}
                      ${{ steps.tarball-min.outputs.path }}
                      ${{ steps.checksum-file.outputs.path }}
                  retention-days: 1

    update-dist:
        runs-on: ubuntu-latest
        needs: [get-matrix, create-tarballs]
        if: always()
        permissions:
            contents: write
            pull-requests: write
        steps:
            - uses: actions/checkout@v3

            - name: Download Artifacts
              if: needs.get-matrix.outputs.rebuild == 'true'
              uses: actions/download-artifact@v3
              with:
                  name: tarballs
                  path: dist/

            - name: Create Pull Request
              uses: peter-evans/create-pull-request@v5
              with:
                  title: Update Dist Files
                  add-paths: dist
                  commit-message: "Update dist files"
                  reviewers: usagirei
                  branch: cpr/dist
                  delete-branch: true
